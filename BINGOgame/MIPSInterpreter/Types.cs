using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MIPSInterpreter
{
    enum Category
    {
        IMM,
        JUMP,
        REG,
        REGIMM,
    }

    enum Op
    {
        SPECIAL = 0b000000,
        REGIMM = 0x000001,

        ADDI = 0b001000,
        ADDIU = 0b001001,
        ANDI = 0b001100,
        BEQ = 0b000100,
        BEQL = 0b010100,
        BGTZ = 0b000111,
        BGTZL = 0b010111,
        BLEZ = 0b000110,
        BLEZL = 0b010110,
        BNE = 0b000101,
        BNEL = 0b010101,
        DADDI = 0b011000,
        DADDIU = 0b011001,
        J = 0b000010,
        JAL = 0b000011,
        LB = 0b100000,
        LBU = 0b100100,
        LD = 0b110111,
        LDL = 0b011010,
        LDR = 0b011011,
        LH = 0b100001,
        LHU = 0b100101,
        LL = 0b110000,
        LLD = 0b110100,
        LUI = 0b001111,
        LW = 0b100011,
        LWL = 0b100010,
        LWR = 0b100110,
        LWU = 0b100111,
        ORI = 0b001101,
        SB = 0b101000,
        SC = 0b111000,
        SCD = 0b111100,
        SD = 0b111111,
        SDL = 0b101100,
        SDR = 0b101101,
        SH = 0b101001,
        SLTI = 0b001010,
        SLTIU = 0b001011,
        SW = 0b101011,
        SWL = 0b101010,
        SWR = 0b101110,
        XORI = 0b001110,
    };

    enum Funct
    {
        ADD = 0b100000,
        ADDU = 0b100001,
        AND = 0b100100,
        BREAK = 0b001101,
        DADD = 0b101100,
        DADDU = 0b101101,
        DDIV = 0b011110,
        DDIVU = 0b011111,
        DIV = 0b011010,
        DIVU = 0b011011,
        DMULT = 0b011100,
        DMULTU = 0b011101,
        DSLL = 0b111000,
        DSLL32 = 0b111100,
        DSLLV = 0b010100,
        DSRA = 0b111011,
        DSRA32 = 0b111111,
        DSRAV = 0b010111,
        DSRL = 0b111010,
        DSRL32 = 0b111110,
        DSRLV = 0b010110,
        DSUB = 0b101110,
        DSUBU = 0b101111,
        JALR = 0b001001,
        JR = 0b001000,
        MFHI = 0b010000,
        MFLO = 0b010010,
        MTHI = 0b010001,
        MTLO = 0b010011,
        MULT = 0b011000,
        MULTU = 0b011001,
        NOR = 0b100111,
        OR = 0b100101,
        SLL = 0b000000,
        SLLV = 0b000100,
        SLT = 0b101010,
        SLTU = 0b101011,
        SRA = 0b000011,
        SRAV = 0b000111,
        SRL = 0b000010,
        SRLV = 0b000110,
        SUB = 0b100010,
        SUBU = 0b100011,
        SYNC = 0b001111,
        SYSCALL = 0b001100,
        XOR = 0b100110,
    };

    enum FunctImm
    {
        BGEZ = 0b00001,
        BGEZAL = 0b10001,
        BGEZALL = 0b10011,
        BGEZL = 0b00011,
        BLTZ = 0b00000,
        BLTZAL = 0b10000,
        BLTZALL = 0b10010,
        BLTZL = 0b00010,
    };

    [Flags]
    enum Cmd
    {
        REG = 0b10000000,
        IMM = 0b01000000,
        REGIMM = IMM | REG,

        ADDI = IMM | Op.ADDI,
        ADDIU = IMM | Op.ADDIU,
        ANDI = IMM | Op.ANDI,
        BEQ = IMM | Op.BEQ,
        BEQL = IMM | Op.BEQL,
        BGTZ = IMM | Op.BGTZ,
        BGTZL = IMM | Op.BGTZL,
        BLEZ = IMM | Op.BLEZ,
        BLEZL = IMM | Op.BLEZL,
        BNE = IMM | Op.BNE,
        BNEL = IMM | Op.BNEL,
        DADDI = IMM | Op.DADDI,
        DADDIU = IMM | Op.DADDIU,
        J = IMM | Op.J,
        JAL = IMM | Op.JAL,
        LB = IMM | Op.LB,
        LBU = IMM | Op.LBU,
        LD = IMM | Op.LD,
        LDL = IMM | Op.LDL,
        LDR = IMM | Op.LDR,
        LH = IMM | Op.LH,
        LHU = IMM | Op.LHU,
        LL = IMM | Op.LL,
        LLD = IMM | Op.LLD,
        LUI = IMM | Op.LUI,
        LW = IMM | Op.LW,
        LWL = IMM | Op.LWL,
        LWR = IMM | Op.LWR,
        LWU = IMM | Op.LWU,
        ORI = IMM | Op.ORI,
        SB = IMM | Op.SB,
        SC = IMM | Op.SC,
        SCD = IMM | Op.SCD,
        SD = IMM | Op.SD,
        SDL = IMM | Op.SDL,
        SDR = IMM | Op.SDR,
        SH = IMM | Op.SH,
        SLTI = IMM | Op.SLTI,
        SLTIU = IMM | Op.SLTIU,
        SW = IMM | Op.SW,
        SWL = IMM | Op.SWL,
        SWR = IMM | Op.SWR,
        XORI = IMM | Op.XORI,

        ADD = REG | Funct.ADD,
        ADDU = REG | Funct.ADDU,
        AND = REG | Funct.AND,
        BREAK = REG | Funct.BREAK,
        DADD = REG | Funct.DADD,
        DADDU = REG | Funct.DADDU,
        DDIV = REG | Funct.DDIV,
        DDIVU = REG | Funct.DDIVU,
        DIV = REG | Funct.DIV,
        DIVU = REG | Funct.DIVU,
        DMULT = REG | Funct.DMULT,
        DMULTU = REG | Funct.DMULTU,
        DSLL = REG | Funct.DSLL,
        DSLL32 = REG | Funct.DSLL32,
        DSLLV = REG | Funct.DSLLV,
        DSRA = REG | Funct.DSRA,
        DSRA32 = REG | Funct.DSRA32,
        DSRAV = REG | Funct.DSRAV,
        DSRL = REG | Funct.DSRL,
        DSRL32 = REG | Funct.DSRL32,
        DSRLV = REG | Funct.DSRLV,
        DSUB = REG | Funct.DSUB,
        DSUBU = REG | Funct.DSUBU,
        JALR = REG | Funct.JALR,
        JR = REG | Funct.JR,
        MFHI = REG | Funct.MFHI,
        MFLO = REG | Funct.MFLO,
        MTHI = REG | Funct.MTHI,
        MTLO = REG | Funct.MTLO,
        MULT = REG | Funct.MULT,
        MULTU = REG | Funct.MULTU,
        NOR = REG | Funct.NOR,
        OR = REG | Funct.OR,
        SLL = REG | Funct.SLL,
        SLLV = REG | Funct.SLLV,
        SLT = REG | Funct.SLT,
        SLTU = REG | Funct.SLTU,
        SRA = REG | Funct.SRA,
        SRAV = REG | Funct.SRAV,
        SRL = REG | Funct.SRL,
        SRLV = REG | Funct.SRLV,
        SUB = REG | Funct.SUB,
        SUBU = REG | Funct.SUBU,
        SYNC = REG | Funct.SYNC,
        SYSCALL = REG | Funct.SYSCALL,
        XOR = REG | Funct.XOR,

        BGEZ = REGIMM | FunctImm.BGEZ,
        BGEZAL = REGIMM | FunctImm.BGEZAL,
        BGEZALL = REGIMM | FunctImm.BGEZALL,
        BGEZL = REGIMM | FunctImm.BGEZL,
        BLTZ = REGIMM | FunctImm.BLTZ,
        BLTZAL = REGIMM | FunctImm.BLTZAL,
        BLTZALL = REGIMM | FunctImm.BLTZALL,
        BLTZL = REGIMM | FunctImm.BLTZL,
    }

    enum Register
    {
        R0,
        AT,
        V0,
        V1,
        A0,
        A1,
        A2,
        A3,
        T0,
        T1,
        T2,
        T3,
        T4,
        T5,
        T6,
        T7,
        S0,
        S1,
        S2,
        S3,
        S4,
        S5,
        S6,
        S7,
        T8,
        T9,
        K0,
        K1,
        GP,
        SP,
        FP,
        RA,
    };

    [Flags]
    enum Format
    {
        IMM  = 0b10000000,
        OFF  = 0b01000000,
        JUMP = 0b00100000,

        REG_S = 0b00000001,
        REG_T = 0b00000010,
        REG_D = 0b00000100,
        REG_A = 0b00001000,

        REG_ST = REG_S | REG_T,
        REG_SD = REG_S | REG_D,
        REG_STD = REG_S | REG_T | REG_D,
        REG_TDA = REG_T | REG_D | REG_A,
        REGIMM_ST = IMM | REG_S | REG_T,
        REGIMM_T = IMM | REG_T,
        REGOFF_S = OFF | REG_S,
        REGOFF_ST = OFF | REG_S | REG_T,
    };
}
